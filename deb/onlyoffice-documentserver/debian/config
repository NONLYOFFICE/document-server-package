#!/bin/sh

set -e

. /usr/share/debconf/confmodule

DB_HOST=""
DB_NAME=""
DB_USER=""
DB_PWD=""
DEFAULT_CONFIG="/etc/onlyoffice/documentserver/default.json"

apply_connection_string(){
	if [ -d /var/www/onlyoffice/ ]; then
		bomstrip < $DEFAULT_CONFIG | \
			json -e "this.services.CoAuthoring.sql.host = \"$DB_HOST\"" | \
			json -e "this.services.CoAuthoring.sql.database = \"$DB_NAME\"" | \
			json -e "this.services.CoAuthoring.sql.user = \"$DB_USER\"" | \
			json -e "this.services.CoAuthoring.sql.pass = \"$DB_PWD\"" > $DEFAULT_CONFIG
	fi
}

get_license_type(){
  LICENSE_NAME=$1
  case "$LICENSE_NAME" in
    "Opensource")
      LICENSE_TYPE=opensource
      ;;
    "Commercial")
      LICENSE_TYPE=integration
      ;;
    *)
      ;;
  esac
}

IS_LICENSE_ACCEPTED=false
STATE=1

while ! ${IS_LICENSE_ACCEPTED};
  do
    case $STATE in
      0)
        STATE=1
        continue
        ;;
      1) # choose a license type
        db_get onlyoffice/license-type
        get_license_type "$RET"

        db_get onlyoffice/${LICENSE_TYPE}-license-acceptance
        if [ "$RET" = "false" ]; then
          db_fset onlyoffice/license-type seen false
          db_fset onlyoffice/${LICENSE_TYPE}-license-notice seen false
          db_fset onlyoffice/${LICENSE_TYPE}-license-acceptance seen false
        fi

         db_input critical onlyoffice/license-type || true
        ;;
      2) # license notice
        db_get onlyoffice/license-type
        get_license_type "$RET"

        db_input critical onlyoffice/${LICENSE_TYPE}-license-notice || true
        ;;
     3) # license acception
        db_input critical onlyoffice/${LICENSE_TYPE}-license-acceptance || true
        ;;
     4) # show error if license wasn't accepted
        db_get onlyoffice/${LICENSE_TYPE}-license-acceptance
        if [ "$RET" = "true" ]; then
          IS_LICENSE_ACCEPTED=true
          break
        fi

        db_input critical onlyoffice/${LICENSE_TYPE}-license-error || true
        ;;
     5) # exit from script
        echo "user did not accept the license" >&2
        echo "If you have not seen any proposals to accept a license," >&2
        echo "try 'dpkg-reconfigure debconf' to select a frontend other than noninteractive" >&2
        exit 2
        ;;
    *)  # unknown state
        echo "license state unknown: $STATE" >&2
        exit 2
    esac

    if db_go; then
      STATE=$(($STATE + 1))
    else
      STATE=$(($STATE - 1))
    fi
  done

db_input medium onlyoffice/db-host || true
db_input medium onlyoffice/db-name || true
db_input medium onlyoffice/db-user || true
db_go

db_input critical onlyoffice/db-pwd || true
db_go

db_get onlyoffice/db-host
DB_HOST="$RET"

db_get onlyoffice/db-name
DB_NAME="$RET"

db_get onlyoffice/db-user
DB_USER="$RET"

db_get onlyoffice/db-pwd
DB_PWD="$RET"

# apply_connection_string

exit 0
